- name: Define the virtual environment directory for OpenFisca Web API
  ansible.builtin.set_fact:
    venv_path: "{{ unix_user.home }}/{{ venv_dir }}"

- name: Check current Python version in the virtual environment
  ansible.builtin.command:
    cmd: "{{ venv_path }}/bin/python --version"
  register: python_version_check
  ignore_errors: true # tells Ansible to continue if python is not yet installed and the command fails
  changed_when: false # tells Ansible that this task does not make any changes
  become_user: "{{ unix_user_name }}"

- name: Remove existing virtual environment if Python version is different
  ansible.builtin.file:
    path: "{{ venv_path }}"
    state: absent
  when: python_version_check.stdout is not search(python_version)
  become_user: "{{ unix_user_name }}"

- name: Create the virtual environment with expected Python version if needed
  ansible.builtin.command:
    cmd: "python{{ python_version }} -m venv {{ venv_path }}"
    creates: "{{ venv_path }}/bin/activate" # tells Ansible to not run this task if the file already exists
  when: python_version_check.stdout is not search(python_version)
  become_user: "{{ unix_user_name }}"

- name: Determine if Matomo is enabled according to role variables
  ansible.builtin.set_fact:
    matomo_enabled: "{{ matomo_site_id and matomo_token and matomo_url }}"

- name: Install the OpenFisca Python packages
  loop:
    - { name: "OpenFisca-Core[tracker]", enabled: "{{ matomo_enabled }}" }
    - { name: "OpenFisca-Core[web-api]", enabled: yes }
    - { name: "{{ country_package }}", enabled: yes }
  when: item.enabled
  ansible.builtin.pip:
    name: "{{ item.name }}"
    state: latest
    virtualenv: "{{ venv_path }}"
    virtualenv_python: "python{{ python_version }}"
    virtualenv_site_packages: no
  become_user: "{{ unix_user_name }}"
